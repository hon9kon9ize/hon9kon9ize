name: Create and publish a Docker image
on:
  push:
    branches: ['release']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      yue-translate: ${{ steps.changes.outputs.yue-translate }}
      extension-api: ${{ steps.changes.outputs.extension-api }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: release
          filters: |
            yue-translate:
              - 'apps/yue-translate/**'
            extension-api:
              - 'apps/extension-api/**'
            infra:
              - docker-compose.prod.yml

  build-and-push-image:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./apps/yue-translate/Dockerfile
            image: ghcr.io/hon9kon9ize/yue-translate
            name: yue-translate
          - dockerfile: ./apps/extension-api/Dockerfile
            image: ghcr.io/hon9kon9ize/extension-api
            name: extension-api
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        if: needs.changes.outputs[matrix.name] == 'true'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        if: needs.changes.outputs[matrix.name] == 'true'
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ matrix.image }}
      - name: Build and push Docker image of the service
        if: needs.changes.outputs[matrix.name] == 'true'
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - changes
      - build-and-push-image
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: release
          filters: |
            infra:
              - docker-compose.prod.yml
      - name: Create .env file
        if: needs.changes.outputs.infra == 'true' || needs.changes.outputs.extension-api == 'true' || needs.changes.outputs.yue-translate == 'true'
        run: |
          echo "Generating .env file"

          echo "# Autogenerated .env file" > .env
          echo "HOST_DOMAIN=${{ secrets.DEPLOY_HOST }}" >> .env
          echo "EXTENSION_API_DOMAIN=${{ vars.DEPLOY_EXTENSION_API_HOST }}" >> .env
          echo "YUE_TRANSLATE_DOMAIN=${{ vars.DEPLOY_YUE_TRANSLATE_HOST }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
          echo "GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}" >> .env
          echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> .env
          echo "LETSENCRYPT_EMAIL=${{ vars.LETSENCRYPT_EMAIL }}" >> .env
          echo "YUE_TRANSLATE_IMAGE_REPO=hon9kon9ize/yue-translate"
          echo "EXTENSION_API_IMAGE_REPO=hon9kon9ize/extension-api"

      # Copy docker-compose and .env files to target server
      - name: copy files to target server via scp
        if: steps.changes.outputs.infra == 'true'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 4022
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./docker-compose.prod.yml,./.env"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      # Deploy Docker image with your application using `docker compose up app` remotely
      - name: remote docker-compose up via ssh
        if: steps.changes.outputs.infra == 'true'
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 4022
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./docker-compose.prod.yml pull
            docker compose -f ./docker-compose.prod.yml up app -d